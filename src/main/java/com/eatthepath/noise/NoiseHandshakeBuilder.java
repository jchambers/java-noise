package com.eatthepath.noise;

import com.eatthepath.noise.component.*;

import javax.annotation.Nullable;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.List;
import java.util.Objects;

@SuppressWarnings("unused")
public class NoiseHandshakeBuilder {

  private final NoiseHandshake.Role role;
  private final HandshakePattern handshakePattern;

  private NamedComponentProvider namedComponentProvider = new DefaultNamedComponentProvider();

  @Nullable private final KeyPair localStaticKeyPair;
  @Nullable private final PublicKey remoteStaticPublicKey;
  @Nullable private final byte[] preSharedKey;

  @Nullable private byte[] prologue;

  @Nullable private NoiseCipher cipher;
  @Nullable private NoiseHash hash;
  @Nullable private NoiseKeyAgreement keyAgreement;

  private NoiseHandshakeBuilder(final NoiseHandshake.Role role,
                                final HandshakePattern handshakePattern,
                                @Nullable final KeyPair localStaticKeyPair,
                                @Nullable final PublicKey remoteStaticPublicKey,
                                @Nullable final byte[] preSharedKey) {

    this.role = role;
    this.handshakePattern = handshakePattern;
    this.localStaticKeyPair = localStaticKeyPair;
    this.remoteStaticPublicKey = remoteStaticPublicKey;

    if (preSharedKey != null && preSharedKey.length != 32) {
      throw new IllegalArgumentException("Pre-shared keys must be exactly 32 bytes");
    }

    this.preSharedKey = preSharedKey;
  }

  public NoiseHandshakeBuilder setNamedComponentProvider(final NamedComponentProvider namedComponentProvider) {
    this.namedComponentProvider = Objects.requireNonNull(namedComponentProvider, "Component name resolver must not be null");
    return this;
  }

  public NoiseHandshakeBuilder setPrologue(@Nullable final byte[] prologue) {
    this.prologue = prologue;
    return this;
  }

  public NoiseHandshakeBuilder setComponentsFromProtocolName(final String protocolName) throws NoSuchAlgorithmException {
    final String expectedPrefix = "Noise_" + handshakePattern.getName() + "_";

    if (!protocolName.startsWith(expectedPrefix)) {
      throw new IllegalArgumentException("Protocol name must be a Noise protocol name beginning with \"" + expectedPrefix + "\"");
    }

    final String[] componentNames = protocolName.substring(expectedPrefix.length()).split("_");

    if (componentNames.length != 3) {
      throw new IllegalArgumentException("Protocol name must be a valid Noise protocol name");
    }

    return setKeyAgreement(componentNames[0])
        .setCipher(componentNames[1])
        .setHash(componentNames[2]);
  }

  public NoiseHandshakeBuilder setCipher(final NoiseCipher cipher) {
    this.cipher = Objects.requireNonNull(cipher, "Cipher must not be null");
    return this;
  }

  public NoiseHandshakeBuilder setCipher(final String cipherName) throws NoSuchAlgorithmException {
    this.cipher = namedComponentProvider.getCipher(Objects.requireNonNull(cipherName, "Cipher must not be null"));
    return this;
  }

  public NoiseHandshakeBuilder setHash(final NoiseHash hash) {
    this.hash = Objects.requireNonNull(hash, "Hash must not be null");
    return this;
  }

  public NoiseHandshakeBuilder setHash(final String hashName) throws NoSuchAlgorithmException {
    this.hash = namedComponentProvider.getHash(Objects.requireNonNull(hashName, "Hash must not be null"));
    return this;
  }

  public NoiseHandshakeBuilder setKeyAgreement(final NoiseKeyAgreement keyAgreement) {
    this.keyAgreement = Objects.requireNonNull(keyAgreement, "Key agreement algorithm must not be null");
    return this;
  }

  public NoiseHandshakeBuilder setKeyAgreement(final String keyAgreementName) throws NoSuchAlgorithmException {
    this.keyAgreement = namedComponentProvider.getKeyAgreement(Objects.requireNonNull(keyAgreementName, "Key agreement algorithm must not be null"));
    return this;
  }

  public NoiseHandshake build() {
    if (cipher == null) {
      throw new IllegalStateException("Must set a cipher before building a Noise handshake");
    }

    if (hash == null) {
      throw new IllegalArgumentException("Must set a hashing algorithm before building a Noise handshake");
    }

    if (keyAgreement == null) {
      throw new IllegalArgumentException("Must set a key agreement algorithm before building a Noise handshake");
    }

    // TODO Check key compatibility

    return new NoiseHandshake(role,
        handshakePattern,
        keyAgreement,
        cipher,
        hash,
        prologue,
        localStaticKeyPair,
        null,
        remoteStaticPublicKey,
        null,
        preSharedKey != null ? List.of(preSharedKey) : null);
  }

  // The following initializer methods are auto-generated by GenerateHandshakeBuilderApp
  public static NoiseHandshakeBuilder forNInitiator(final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("N"),
          null,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("N"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKInitiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("K"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKResponder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("K"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXInitiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("X"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("X"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNNInitiator() {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("NN"),
          null,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNNResponder() {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("NN"),
          null,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKNInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("KN"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKNResponder(final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("KN"),
          null,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNKInitiator(final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("NK"),
          null,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNKResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("NK"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKKInitiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("KK"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKKResponder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("KK"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNXInitiator() {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("NX"),
          null,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNXResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("NX"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKXInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("KX"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKXResponder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("KX"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXNInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("XN"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXNResponder() {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("XN"),
          null,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forINInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("IN"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forINResponder() {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("IN"),
          null,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXKInitiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("XK"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXKResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("XK"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIKInitiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("IK"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIKResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("IK"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXXInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("XX"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXXResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("XX"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIXInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("IX"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIXResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("IX"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNK1Initiator(final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("NK1"),
          null,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNK1Responder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("NK1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNX1Initiator() {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("NX1"),
          null,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNX1Responder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("NX1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forX1NInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("X1N"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forX1NResponder() {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("X1N"),
          null,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forX1KInitiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("X1K"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forX1KResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("X1K"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXK1Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("XK1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXK1Responder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("XK1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forX1K1Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("X1K1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forX1K1Responder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("X1K1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forX1XInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("X1X"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forX1XResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("X1X"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXX1Initiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("XX1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXX1Responder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("XX1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forX1X1Initiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("X1X1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forX1X1Responder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("X1X1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forK1NInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("K1N"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forK1NResponder(final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("K1N"),
          null,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forK1KInitiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("K1K"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forK1KResponder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("K1K"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKK1Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("KK1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKK1Responder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("KK1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forK1K1Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("K1K1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forK1K1Responder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("K1K1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forK1XInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("K1X"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forK1XResponder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("K1X"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKX1Initiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("KX1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKX1Responder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("KX1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forK1X1Initiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("K1X1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forK1X1Responder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("K1X1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forI1NInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("I1N"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forI1NResponder() {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("I1N"),
          null,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forI1KInitiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("I1K"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forI1KResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("I1K"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIK1Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("IK1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIK1Responder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("IK1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forI1K1Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("I1K1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forI1K1Responder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("I1K1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forI1XInitiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("I1X"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forI1XResponder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("I1X"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIX1Initiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("IX1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIX1Responder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("IX1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forI1X1Initiator(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("I1X1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forI1X1Responder(final KeyPair localStaticKeyPair) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("I1X1"),
          localStaticKeyPair,
          null,
          null);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNPsk0Initiator(final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("Npsk0"),
          null,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNPsk0Responder(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("Npsk0"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKPsk0Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("Kpsk0"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKPsk0Responder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("Kpsk0"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXPsk1Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("Xpsk1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXPsk1Responder(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("Xpsk1"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNNPsk0Initiator(final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("NNpsk0"),
          null,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNNPsk0Responder(final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("NNpsk0"),
          null,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNNPsk2Initiator(final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("NNpsk2"),
          null,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNNPsk2Responder(final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("NNpsk2"),
          null,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNKPsk0Initiator(final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("NKpsk0"),
          null,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNKPsk0Responder(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("NKpsk0"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNKPsk2Initiator(final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("NKpsk2"),
          null,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNKPsk2Responder(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("NKpsk2"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNXPsk2Initiator(final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("NXpsk2"),
          null,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forNXPsk2Responder(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("NXpsk2"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXNPsk3Initiator(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("XNpsk3"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXNPsk3Responder(final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("XNpsk3"),
          null,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXKPsk3Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("XKpsk3"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXKPsk3Responder(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("XKpsk3"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXXPsk3Initiator(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("XXpsk3"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forXXPsk3Responder(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("XXpsk3"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKNPsk0Initiator(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("KNpsk0"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKNPsk0Responder(final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("KNpsk0"),
          null,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKNPsk2Initiator(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("KNpsk2"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKNPsk2Responder(final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("KNpsk2"),
          null,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKKPsk0Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("KKpsk0"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKKPsk0Responder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("KKpsk0"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKKPsk2Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("KKpsk2"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKKPsk2Responder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("KKpsk2"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKXPsk2Initiator(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("KXpsk2"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forKXPsk2Responder(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("KXpsk2"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forINPsk1Initiator(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("INpsk1"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forINPsk1Responder(final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("INpsk1"),
          null,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forINPsk2Initiator(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("INpsk2"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forINPsk2Responder(final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("INpsk2"),
          null,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIKPsk1Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("IKpsk1"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIKPsk1Responder(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("IKpsk1"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIKPsk2Initiator(final KeyPair localStaticKeyPair, final PublicKey remoteStaticPublicKey, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("IKpsk2"),
          localStaticKeyPair,
          remoteStaticPublicKey,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIKPsk2Responder(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("IKpsk2"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIXPsk2Initiator(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.INITIATOR,
          HandshakePattern.getInstance("IXpsk2"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }

  public static NoiseHandshakeBuilder forIXPsk2Responder(final KeyPair localStaticKeyPair, final byte[] preSharedKey) {
    try {
      return new NoiseHandshakeBuilder(NoiseHandshake.Role.RESPONDER,
          HandshakePattern.getInstance("IXpsk2"),
          localStaticKeyPair,
          null,
          preSharedKey);
    } catch (final NoSuchPatternException e) {
      throw new AssertionError("Statically-generated handshake pattern not found", e);
    }
  }
}
