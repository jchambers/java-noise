package com.eatthepath.noise.component;

import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;

/**
 * A Noise key agreement implementation encapsulates the key agreement functions of a Noise protocol. A Noise key
 * agreement generates key pairs for key agreement operations with the remote party in a Noise handshake, performs key
 * agreement operations, and converts keys to and from "raw" formats for serialization in Noise messages.
 */
public interface NoiseKeyAgreement {

  /**
   * Returns the name of this Noise key agreement as it would appear in a full Noise protocol name.
   *
   * @return the name of this Noise key agreement as it would appear in a full Noise protocol name
   */
  String getName();

  /**
   * Generates a new key pair compatible with this key agreement algorithm for use in a Noise handshake.
   *
   * @return a new key pair for use in a Noise handshake
   */
  KeyPair generateKeyPair();

  /**
   * Calculates a shared secret from a local private key and a remote public key.
   *
   * @param privateKey the local private key from which to calculate a shared secret
   * @param publicKey the remote public key from which to calculate a shared secret
   *
   * @return a shared secret of length {@link #getPublicKeyLength()}
   *
   * @throws InvalidKeyException if either the local private key or remote public key is not a valid key for this
   * key agreement algorithm
   */
  byte[] generateSecret(PrivateKey privateKey, PublicKey publicKey) throws InvalidKeyException;

  /**
   * Returns the length of public keys and shared secrets generated by this key agreement algorithm.
   *
   * @return the length of public keys and shared secrets generated by this key agreement algorithm
   */
  int getPublicKeyLength();

  /**
   * Serializes a public key compatible with this key agreement algorithm to an array of bytes suitable for transmission
   * in a Noise handshake message.
   *
   * @param publicKey the public key to serialize as an array of bytes
   *
   * @return a byte array containing the "raw" public key
   *
   * @see #deserializePublicKey(byte[])
   */
  byte[] serializePublicKey(PublicKey publicKey);

  /**
   * Interprets a "raw" public key as a {@link PublicKey} compatible with this key agreement algorithm.
   *
   * @param publicKeyBytes the "raw" public key bytes to interpret; must have a length of {@link #getPublicKeyLength()}
   *
   * @return a {@code PublicKey} instance defined by the given {@code publicKeyBytes}
   *
   * @throws InvalidKeySpecException if the given array of bytes could not be interpreted as a public key compatible
   * with this key agreement algorithm for any reason
   *
   * @see #serializePublicKey(PublicKey)
   */
  PublicKey deserializePublicKey(byte[] publicKeyBytes) throws InvalidKeySpecException;
}
