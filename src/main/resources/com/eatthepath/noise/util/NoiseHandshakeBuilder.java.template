package com.eatthepath.noise;

import javax.annotation.Nullable;
import java.security.KeyPair;
import java.security.PublicKey;
import java.util.Objects;

@SuppressWarnings("unused")
public class NoiseHandshakeBuilder {

  private final NoiseHandshake.Role role;

  private final HandshakePattern handshakePattern;

  @Nullable private final KeyPair localStaticKeyPair;
  @Nullable private final PublicKey remoteStaticPublicKey;

  @Nullable private KeyPair localEphemeralKeyPair;
  @Nullable private PublicKey remoteEphemeralPublicKey;

  @Nullable private byte[] prologue;

  @Nullable private NoiseCipher cipher;
  @Nullable private NoiseHash hash;
  @Nullable private NoiseKeyAgreement keyAgreement;

  private NoiseHandshakeBuilder(final NoiseHandshake.Role role,
                                final HandshakePattern handshakePattern,
                                @Nullable final KeyPair localStaticKeyPair,
                                @Nullable final PublicKey remoteStaticPublicKey) {

    this.role = role;
    this.handshakePattern = handshakePattern;
    this.localStaticKeyPair = localStaticKeyPair;
    this.remoteStaticPublicKey = remoteStaticPublicKey;
  }

  public NoiseHandshakeBuilder setLocalEphemeralKeyPair(@Nullable final KeyPair localEphemeralKeyPair) {
    this.localEphemeralKeyPair = localEphemeralKeyPair;
    return this;
  }

  public NoiseHandshakeBuilder setRemoteEphemeralPublicKey(@Nullable final PublicKey remoteEphemeralPublicKey) {
    this.remoteEphemeralPublicKey = remoteEphemeralPublicKey;
    return this;
  }

  public NoiseHandshakeBuilder setPrologue(@Nullable final byte[] prologue) {
    this.prologue = prologue;
    return this;
  }

  public NoiseHandshakeBuilder setCipher(final NoiseCipher cipher) {
    this.cipher = Objects.requireNonNull(cipher, "Cipher must not be null");
    return this;
  }

  public NoiseHandshakeBuilder setHash(final NoiseHash hash) {
    this.hash = Objects.requireNonNull(hash, "Hash algorithm must not be null");
    return this;
  }

  public NoiseHandshakeBuilder setKeyAgreement(final NoiseKeyAgreement keyAgreement) {
    this.keyAgreement = Objects.requireNonNull(keyAgreement, "Key agreement algorithm must not be null");
    return this;
  }

  public NoiseHandshake build() {
    if (cipher == null) {
      throw new IllegalStateException("Must set a cipher before building a Noise handshake");
    }

    if (hash == null) {
      throw new IllegalArgumentException("Must set a hashing algorithm before building a Noise handshake");
    }

    if (keyAgreement == null) {
      throw new IllegalArgumentException("Must set a key agreement algorithm before building a Noise handshake");
    }

    // TODO Check key compatibility

    return new NoiseHandshake(handshakePattern,
        role,
        cipher,
        hash,
        keyAgreement,
        prologue,
        localStaticKeyPair,
        localEphemeralKeyPair,
        remoteStaticPublicKey,
        remoteEphemeralPublicKey);
  }

  // The following initializer methods are auto-generated by GenerateHandshakeBuilderApp
// ----- AUTOGENERATED INITIALIZERS HERE -----
}
