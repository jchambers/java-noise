package com.eatthepath.noise;

import com.eatthepath.noise.component.*;

import javax.annotation.Nullable;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.List;
import java.util.Objects;

@SuppressWarnings("unused")
public class NoiseHandshakeBuilder {

  private final NoiseHandshake.Role role;
  private final HandshakePattern handshakePattern;

  @Nullable private final KeyPair localStaticKeyPair;
  @Nullable private final PublicKey remoteStaticPublicKey;
  @Nullable private final byte[] preSharedKey;

  @Nullable private byte[] prologue;

  @Nullable private NoiseCipher cipher;
  @Nullable private NoiseHash hash;
  @Nullable private NoiseKeyAgreement keyAgreement;

  private NoiseHandshakeBuilder(final NoiseHandshake.Role role,
                                final HandshakePattern handshakePattern,
                                @Nullable final KeyPair localStaticKeyPair,
                                @Nullable final PublicKey remoteStaticPublicKey,
                                @Nullable final byte[] preSharedKey) {

    this.role = role;
    this.handshakePattern = handshakePattern;
    this.localStaticKeyPair = localStaticKeyPair;
    this.remoteStaticPublicKey = remoteStaticPublicKey;

    if (preSharedKey != null && preSharedKey.length != 32) {
      throw new IllegalArgumentException("Pre-shared keys must be exactly 32 bytes");
    }

    this.preSharedKey = preSharedKey;
  }

  public NoiseHandshakeBuilder setPrologue(@Nullable final byte[] prologue) {
    this.prologue = prologue;
    return this;
  }

  public NoiseHandshakeBuilder setComponentsFromProtocolName(final String protocolName) throws NoSuchAlgorithmException {
    final String expectedPrefix = "Noise_" + handshakePattern.getName() + "_";

    if (!protocolName.startsWith(expectedPrefix)) {
      throw new IllegalArgumentException("Protocol name must be a Noise protocol name beginning with \"" + expectedPrefix + "\"");
    }

    final String[] componentNames = protocolName.substring(expectedPrefix.length()).split("_");

    if (componentNames.length != 3) {
      throw new IllegalArgumentException("Protocol name must be a valid Noise protocol name");
    }

    return setKeyAgreement(componentNames[0])
        .setCipher(componentNames[1])
        .setHash(componentNames[2]);
  }

  public NoiseHandshakeBuilder setCipher(final String cipherName) throws NoSuchAlgorithmException {
    this.cipher = NoiseCipher.getInstance(Objects.requireNonNull(cipherName, "Cipher must not be null"));
    return this;
  }

  public NoiseHandshakeBuilder setHash(final String hashName) throws NoSuchAlgorithmException {
    this.hash = NoiseHash.getInstance(Objects.requireNonNull(hashName, "Hash must not be null"));
    return this;
  }

  public NoiseHandshakeBuilder setKeyAgreement(final String keyAgreementName) throws NoSuchAlgorithmException {
    this.keyAgreement = NoiseKeyAgreement.getInstance(Objects.requireNonNull(keyAgreementName, "Key agreement algorithm must not be null"));
    return this;
  }

  public NoiseHandshake build() {
    if (cipher == null) {
      throw new IllegalStateException("Must set a cipher before building a Noise handshake");
    }

    if (hash == null) {
      throw new IllegalArgumentException("Must set a hashing algorithm before building a Noise handshake");
    }

    if (keyAgreement == null) {
      throw new IllegalArgumentException("Must set a key agreement algorithm before building a Noise handshake");
    }

    // TODO Check key compatibility

    return new NoiseHandshake(role,
        handshakePattern,
        keyAgreement,
        cipher,
        hash,
        prologue,
        localStaticKeyPair,
        null,
        remoteStaticPublicKey,
        null,
        preSharedKey != null ? List.of(preSharedKey) : null);
  }

  // The following initializer methods are auto-generated by GenerateHandshakeBuilderApp
// ----- AUTOGENERATED INITIALIZERS HERE -----
}
